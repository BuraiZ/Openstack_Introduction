heat_template_version: 2014-10-16

description: A template to deploy a load balanced web server

parameters:
  key_name:
    type: string
    description: Name of an existing key pair to use for the server
    default: key-TP1

  image:
    type: string
    description: Image utilisee pour les serveurs
    default: INF4410-Ubuntu-trusty-mini

  flavor:
    type: string
    description: Flavor utilisee par les serveurs
    default: INF4410-mini
      
  network:
    type: string
    description: Network to connect
    default: 938775f1-1d27-4d35-a41d-e76eac6797db
    
  floating_network:
    type: string
    description: Network IP of external network
    default: 0c3b1354-d3d5-4fec-86d3-19d4d1f13785

  subnet_id:
    type: string
    description: Sous-reseau dans lequel le load balancer sera situe
    default: 6579eb07-88c3-4707-9c6e-ab90a78cca02

resources:
  server_nodes:
      type: OS::Heat::ResourceGroup
      properties:
        count: 2
        resource_def:
          type: OS::Nova::Server
          properties:
            key_name: { get_param: key_name }
            image: { get_param: image }
            flavor: { get_param: flavor }
            networks: 
              - network: { get_param: network }
            name: server_%index%
            
            user_data: |
              #!/bin/bash
              wget https://raw.githubusercontent.com/houssemmh/INF8480-TP3/master/server.py
              exec python server.py
        

  mypool:
      type: OS::Neutron::Pool
      properties:
        protocol: HTTP
        monitors: [{get_resource: mymonitor}]
        subnet_id: {get_param: subnet_id}
        lb_method: ROUND_ROBIN
        vip:
          protocol_port: 8080


  myloadbalancer:
      type: OS::Neutron::LoadBalancer
      properties:
        protocol_port: 8080
        pool_id: {get_resource: mypool}
        members: { get_attr: [server_nodes, refs] }
      

  mymonitor:
      type: OS::Neutron::HealthMonitor
      properties:
        type: TCP
        delay: 15
        timeout: 5
        max_retries: 2
        
        
  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: floating_network }
      port_id: { get_attr: [mypool, vip, port_id] }

outputs:
  pool_ip_address:
    value: {get_attr: [mypool, vip, address]}
    description: The IP address of the load balancing pool
